import { withPageAuthRequired } from '@auth0/nextjs-auth0/client'
import CustomTable from '@/components/table'
import { Breadcrumb, BreadcrumbItem, Button, Container, FormControl, FormLabel, Input, Select, Skeleton, Stack } from '@chakra-ui/react'
import Head from 'next/head'
import { useState } from 'react'

const Home =({resp}) => {
  const [page, setPage] = useState([0,10])
  const [type, setType] = useState(null)
  const [res, setRes] = useState(resp.slice(page[0],page[1]))
  const [number, setNumber] = useState(0)
  const [loading, setLoading] = useState(false)
  const [value, setValue] = useState(0)

  const increment = () => {
    setPage([page[0]+10, page[1]+10])
  }
  const decrement = () => {
    setPage([page[0]-10, page[1]-10])
  }


  const generate = async(e) => {
    e.preventDefault()
    try{
      setLoading(true)
      const gen = await fetch(`${process.env.NEXT_PUBLIC_BE}/generateCode`,
      {
        method:'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body:JSON.stringify({'quantity':number, type, value})
      })
      const res = await gen.json()
      return res
    }catch(e){
      console.log(e)
    }finally{
      const data = await fetch(`${process.env.NEXT_PUBLIC_BE}/generateCode`)
      const res =await data.json()
      setRes(res)
      setLoading(false)
    }
    
  }


  return (
    <Container maxW='5xl'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>  
      <br /><br />
      <FormControl id="number">
        <FormLabel>Number of codes to generate:</FormLabel>
          <Input
            placeholder="Number of codes to generate"
            _placeholder={{ color: 'gray.500' }}
            type="number"
            value={number}
            onChange={(e)=> setNumber(e.target.value)}
          />
        </FormControl>
        <br />
        <FormControl>
        <FormLabel>Code type:</FormLabel>
        <Select placeholder='Code type' value={type} onChange={e=>setType(e.target.value)}>
          <option value='airtime'>Airtime</option>
          <option value='raffle'>Raffle</option>
        </Select>
        </FormControl>
        <br />
      {type === "airtime" && <FormControl id="value">
          <FormLabel>Value:</FormLabel>
          <Input
            placeholder="Value"
            _placeholder={{ color: 'gray.500' }}
            type="number"
            value={value}
            onChange={(e)=> setValue(e.target.value)}
          />
          
        </FormControl>}
        
        <br /><Button onClick={generate}>generate</Button> <br /><br />
        {loading ?
        <Stack>
        <Skeleton height='50px' /><br />
        <Skeleton height='50px' /><br />
        <Skeleton height='50px' />
      </Stack>:
      <CustomTable tvalue={res.reverse()} resp={resp}
      />
        }
    </Container>
  )
}
const protectedRoute = withPageAuthRequired(Home)
export default protectedRoute

export const getServerSideProps = async() => {
  const data = await fetch(`${process.env.NEXT_PUBLIC_BE}/generateCode`)
  const resp = await data.json()
  return {
    props:{resp},
    fallback: false
  }
}